const jwt = require('jsonwebtoken'); const secretKey = 'your-secret-key'; const
expiresIn = '15m'; // Token expires in 15 minutes function generateToken(user) {
const payload = { sub: user.id, name: user.name, role: user.role, }; return
jwt.sign(payload, secretKey, { expiresIn }); } const jwt =
require('jsonwebtoken'); const secretKey = 'your-secret-key'; const expiresIn =
'15m'; // Token expires in 15 minutes function generateToken(user) { const
payload = { sub: user.id, name: user.name, role: user.role, }; return
jwt.sign(payload, secretKey, { expiresIn }); } const jwt =
require('jsonwebtoken'); const crypto = require('crypto'); // Secret keys const
ACCESS_TOKEN_SECRET = 'your_access_token_secret'; const REFRESH_TOKEN_SECRET =
'your_refresh_token_secret'; // Generate Access Token function
generateAccessToken(user) { return jwt.sign({ userId: user.id },
ACCESS_TOKEN_SECRET, { expiresIn: '15m' }); } // Generate Refresh Token function
generateRefreshToken() { return crypto.randomBytes(64).toString('hex'); }
storing res.cookie('refreshToken', refreshToken, { httpOnly: true, secure: true,
// Set to true if using HTTPS sameSite: 'Strict', maxAge: 7 * 24 * 60 * 60 *
1000 // 7 days }); Refresh token is stored in a secure cookie and sent to the
client. The client app.post('/token', async (req, res) => { const refreshToken =
req.cookies.refreshToken; if (!refreshToken) return res.sendStatus(401); //
Verify refresh token exists in the database const storedToken = await
findRefreshTokenInDB(refreshToken); if (!storedToken) return
res.sendStatus(403); // Check if refresh token has expired if
(storedToken.expiryDate < new Date()) { await
deleteRefreshTokenFromDB(refreshToken); return res.sendStatus(403); } //
Generate new tokens const user = await findUserById(storedToken.userId); const
newAccessToken = generateAccessToken(user); const newRefreshToken =
generateRefreshToken(); // Update refresh token in the database await
updateRefreshTokenInDB(refreshToken, newRefreshToken); // Set new refresh token
cookie res.cookie('refreshToken', newRefreshToken, { httpOnly: true, secure:
true, sameSite: 'Strict', maxAge: 7 * 24 * 60 * 60 * 1000 }); res.json({
accessToken: newAccessToken }); }); revoking refresh tokens from the database.
This can be done by deleting the token from the database or marking it as
revoked. The client should also delete the app.post('/logout', async (req, res)
=> { const refreshToken = req.cookies.refreshToken; if (refreshToken) { await
deleteRefreshTokenFromDB(refreshToken); res.clearCookie('refreshToken'); }
res.sendStatus(204); });
